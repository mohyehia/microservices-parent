---
version: '3'
services:

  # mysql database for order-service
  order-service-mysql:
    container_name: order-service-mysql
    image: mysql:latest
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: order-service
      MYSQL_PASSWORD: P@ssw0rd
    ports:
      - '3306:3306'
    volumes:
      - D:\docker-volumes\order-service-mysql:/var/lib/mysql
      - D:\docker-volumes\order-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # mysql database for inventory-service
  inventory-service-mysql:
    container_name: inventory-service-mysql
    image: mysql:latest
    environment:
      MYSQL_DATABASE: inventory-service
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: inventory-service
      MYSQL_PASSWORD: P@ssw0rd
      MYSQL_TCP_PORT: 3300
    ports:
      - '3300:3300'
    expose:
      - '3300'
    volumes:
      - D:\docker-volumes\inventory-service-mysql:/var/lib/mysql
      - D:\docker-volumes\inventory-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # mongo database for product-service
  product-service-mongo:
    container_name: product-service-mongo
    image: mongo:latest
    restart: unless-stopped
    ports:
      - '27017:27017'
    expose:
      - '27017'
    volumes:
      - D:\docker-volumes\product-service-mongo:/data/db

  # mysql database for keycloak
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - D:\docker-volumes\keycloak-mysql:/var/lib/mysql
    ports:
      - '3301:3301'
    expose:
      - '3301'
    environment:
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: P@ssw0rd
      MYSQL_ROOT_PASSWORD: root
      MYSQL_TCP_PORT: 3301

  # keycloak image
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:21.0.1
    command: [ "start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - '8080:8080'
    volumes:
      - D:\docker-volumes\keycloak-data:/opt/keycloak/data/import
    depends_on:
      - keycloak-mysql

  # zipkin server
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - '9411:9411'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # discovery server
  discovery-server:
    container_name: discovery-server
    image: discovery-server:1.0.0
    ports:
      - '8761:8761'
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - zipkin

  # config server
  config-server:
    container_name: config-server
    image: config-server:1.0.0
    ports:
      - '8888:8888'
    depends_on:
      - discovery-server
      - zipkin

  # api gateway
  api-gateway:
    container_name: api-gateway
    image: api-gateway:1.0.0
    ports:
      - '8082:8082'
    expose:
      - '8082'
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    depends_on:
      - zipkin
      - discovery-server

  # authentication-service
  authentication-service:
    container_name: authentication-service
    image: authentication-service:1.0.0
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
      - api-gateway

  # product-service
  product-service:
    container_name: product-service
    image: product-service:1.0.0
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - product-service-mongo
      - discovery-server
      - api-gateway
      - config-server

  # order-service
  order-service:
    container_name: order-service
    image: order-service:1.0.0
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - order-service-mysql
      - broker
      - zipkin
      - discovery-server
      - api-gateway
      - config-server

  # inventory-service
  inventory-service:
    container_name: inventory-service
    image: inventory-service:1.0.0
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - inventory-service-mysql
      - broker
      - zipkin
      - discovery-server
      - api-gateway
      - config-server

  # notification-service
  notification-service:
    container_name: notification-service
    image: notification-service:1.0.0
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
      - config-server

  # prometheus
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - D:\docker-volumes\prometheus\prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  # grafana
  grafana:
    image: grafana/grafana-oss:9.4.7
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - D:\docker-volumes\grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
